service: serverlesstest

provider:
  name: aws
  runtime: dotnetcore2.1
  region: ap-southeast-2
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
  #   - Effect: Allow
  #     Action:
  #       - "dynamodb:PutItem"
  #       - "dynamodb:GetItem"
  #       - "dynamodb:UpdateItem"
  #       - "dynamodb:DeleteItem"
  #       - "dynamodb:Query"
  #       - "dynamodb:Scan"
  #     Resource:
  #       - Fn::GetAtt: [ChatConnectionsTable, Arn]
  #       - Fn::Join:
  #           - "/"
  #           - - Fn::GetAtt: [ChatConnectionsTable, Arn]
  #             - "*"
  # environment:
  #   CHATCONNECTION_TABLE:
  #     Ref: ChatConnectionsTable

  websocketApiName: websocket-chat-${self:provider.stage}
  websocketApiRouteSelectionExpression: $request.body.action

package:
  artifact: build/hello.zip

functions:
  api:
    handler: serverless.test::serverless.test.LambdaEntryPoint::FunctionHandlerAsync
    events:
      - http:
         path: /{proxy+}
         method: ANY
      - websocket:
         route: $connect
         #authorizer: authorizerFunc # references the authorizerFunc function below
      - websocket:
         route: $disconnect
      - websocket:
          route: $default

  #         resources:
  # Resources:
  #   ChatConnectionsTable:
  #     Type: AWS::DynamoDB::Table
  #     Properties:
  #       AttributeDefinitions:
  #         - AttributeName: connectionId
  #           AttributeType: S
  #       KeySchema:
  #         - AttributeName: connectionId
  #           KeyType: HASH
  #       ProvisionedThroughput:
  #         ReadCapacityUnits: 5
  #         WriteCapacityUnits: 5



# service: serverless-chat

# provider:
#   name: aws
#   runtime: nodejs8.10
#   stackName: ${self:service}-${self:provider.stage}
#   stage: ${opt:stage, 'dev'}
#   region: ${opt:region, 'ap-southeast-2'}
#   iamRoleStatements:
#     - Effect: Allow
#       Action:
#         - "execute-api:ManageConnections"
#       Resource:
#         - "arn:aws:execute-api:*:*:**/@connections/*"
#     - Effect: Allow
#       Action:
#         - "dynamodb:PutItem"
#         - "dynamodb:GetItem"
#         - "dynamodb:UpdateItem"
#         - "dynamodb:DeleteItem"
#         - "dynamodb:Query"
#         - "dynamodb:Scan"
#       Resource:
#         - Fn::GetAtt: [ChatConnectionsTable, Arn]
#         - Fn::Join:
#             - "/"
#             - - Fn::GetAtt: [ChatConnectionsTable, Arn]
#               - "*"
#   environment:
#     CHATCONNECTION_TABLE:
#       Ref: ChatConnectionsTable

#   websocketApiName: websocket-chat-${self:provider.stage}
#   websocketApiRouteSelectionExpression: $request.body.action

# functions:
#   connectionManager:
#     handler: handler.connectionManager
#     events:
#       - websocket:
#           route: $connect
#           authorizer: authorizerFunc # references the authorizerFunc function below
#       - websocket:
#           route: $disconnect
#   authorizerFunc:
#     handler: handler.authorizerFunc
#   defaultMessages:
#     handler: handler.defaultMessage
#     events:
#       - websocket:
#           route: $default
#   sendMessage:
#     handler: handler.sendMessage
#     events:
#       - websocket:
#           route: sendMessage
# resources:
#   Resources:
#     ChatConnectionsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: connectionId
#             AttributeType: S
#         KeySchema:
#           - AttributeName: connectionId
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5